<?phpclass SubAccessToken{    //公众号的信息    private $wx = array();	public function __construct($token,$appid,$appsecret)	{		$this->wx['token'] = $token;		$this->wx['appid'] = $appid;		$this->wx['appsecret'] = $appsecret;	}    //从服务器获取    private function getAccessTokenInfoFromServer()    {        $aurl = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=".$this->wx['appid']."&secret=".$this->wx['appsecret'];        $a = $this->curl_file_get_contents($aurl);        $at = json_decode($a, true);        return $at;    }    private function getAccessTokenFromServer()    {        $info = $this->getAccessTokenInfoFromServer();        return $info['access_token'];    }    //定时从服务器刷新    public function getAccessToken(){        $nowTime = date('y-m-d H:i:s',time());        $refreshDBAccessToken = 0;        $memo = "初始化：".C($this->wx['token'].'_access_token').';';        if(C($this->wx['token'].'_access_token')){            $dbAccessTokenCreatetime = C($this->wx['token'].'_createtime');            $diff= strtotime($nowTime)-strtotime($dbAccessTokenCreatetime);            if($diff>6800){                $info = $this->getAccessTokenInfoFromServer();                $memo = $memo."时间差：".$diff.'';                $result = $info['access_token'];                $expires_in = $info['expires_in'];                $refreshDBAccessToken = 1;	            $returnResult = C($this->wx['token'] . '_access_token');	            // <= 如果系统访问量少，太久没有刷新，可能造成旧的已经失效，不出现问题的前提是差不多失效时总会有人访问。	            $returnResult = $info['access_token'];	            // <= 多并发时，可能造成同一时刻刷新多次            }else {	            $returnResult = C($this->wx['token'] . '_access_token');            }        }else{            $info = $this->getAccessTokenInfoFromServer();            $memo =  $memo.'新结果：'.$info['access_token'];            $result = $info['access_token'];            $expires_in = $info['expires_in'];            $refreshDBAccessToken = 2;	        $returnResult = $info['access_token'];        }        if($refreshDBAccessToken >0 )        {            $data['token'] = $this->wx['token'];            $data['access_token'] = $result;            $data['createtime'] = $nowTime;            $data['expires_in'] = $expires_in;            $data['memo'] = $memo;            M('access_token')->add($data);            import('ORG.Setting');            $Setting = new \Setting();            $Setting->updateSubAccessToken($this->wx['token'],$data);        }        return $returnResult;    }    private function curl_file_get_contents($durl)    {        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, $durl);        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // 获取数据返回        curl_setopt($ch, CURLOPT_BINARYTRANSFER, true); // 在启用 CURLOPT_RETURNTRANSFER 时候将获取数据返回        $r = curl_exec($ch);        curl_close($ch);        return $r;    }}?>